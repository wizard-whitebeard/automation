name: Upload artifact to S3
on:
  workflow_call:
    inputs:
      artifact-name:
        description: Name of the GitHub artifact to upload
        type: string
        required: true
env:
  BUCKET_NAME : "waldocat-storage"
  AWS_REGION : "us-east-2" 

jobs:
  artifact-to-s3:
    runs-on: ubuntu-latest
    steps:
      # Download the package
      - name: Download artifact
        uses: actions/download-artifact@v2
        with: 
          name: ${{ inputs.artifact-name }}

      # Get ID token from GitHub OIDC provider
      - uses: actions/setup-node@v2
      - run: npm install @actions/core@1.6.0-beta.0 
      - uses: actions/github-script@v4
        id: idtoken
        with:
        # Audience field is optional. By default, the value is the repo's url. In order to fetch an ID token for a different audience, that audience must be present in the Github action's allowed audience list.
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken()   
            coredemo.setOutput('id_token', id_token)

      # Get credentials. Change --role-arn value to your role arn

      - name: Get temp credentials using id token. 
        run: |
          CREDENTIALS=$(aws sts assume-role-with-web-identity  --role-arn 'arn:aws:iam::153253260217:role/OIDC-S3' --role-session-name 'samplerolesession' --web-identity-token ${{ steps.idtoken.outputs.id_token }} --query Credentials)
          AID=$(echo $CREDENTIALS | jq -rc '.AccessKeyId')
          AKEY=$(echo $CREDENTIALS | jq -rc '.SecretAccessKey')
          STOKEN=$(echo $CREDENTIALS | jq -rc '.SessionToken')
          echo ::add-mask::$AID && echo ::add-mask::$AKEY && echo ::add-mask::$STOKEN
          echo ::set-output name=ACCESSID::$AID && echo ::set-output name=ACCESSKEY::$AKEY && echo ::set-output name=SESSIONTOKEN::$STOKEN
        id: credentials  

       ###########################################################################################################

      # Runs a set of commands using the runners shell
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1

        with:
          aws-access-key-id: ${{ steps.credentials.outputs.ACCESSID }}
          aws-secret-access-key: ${{ steps.credentials.outputs.ACCESSKEY }}
          aws-session-token: ${{ steps.credentials.outputs.SESSIONTOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name:  Copy package to s3
        run: aws s3 cp ${{ inputs.artifact-name }} s3://${{ env.BUCKET_NAME }}/
